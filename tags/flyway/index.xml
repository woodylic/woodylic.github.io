<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>flyway on woodylic's blog</title><link>https://woodylic.github.io/tags/flyway/</link><description>Recent content in flyway on woodylic's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 23 Mar 2017 23:58:41 +0000</lastBuildDate><atom:link href="https://woodylic.github.io/tags/flyway/index.xml" rel="self" type="application/rss+xml"/><item><title>使用maven和flyway管理数据库schema</title><link>https://woodylic.github.io/post/manage-database-migration-using-maven-and-flyway/</link><pubDate>Thu, 23 Mar 2017 23:58:41 +0000</pubDate><guid>https://woodylic.github.io/post/manage-database-migration-using-maven-and-flyway/</guid><description>&lt;h1 id="为什么需要数据库schema版本管理">为什么需要数据库schema版本管理&lt;/h1>
&lt;p>作为开发人员，代码版本控制已经属于标配了，但是很多团队还不会把数据库schema纳入版本控制。在开发期间，schema随着需求变化，而这些变化难以追踪记录，从而导致开发人员之间，以及各个环境下的数据库schema的一致性问题。&lt;/p>
&lt;p>引入数据库schema版本管理，是期望模仿代码版本控制，把schema的所有版本记录下来，并且可以自动地把数据库升级到最新版本。&lt;/p>
&lt;p>&lt;em>参考：&lt;a href="https://flywaydb.org/getstarted/why">Why database migrations?&lt;/a>&lt;/em>&lt;/p></description></item></channel></rss>