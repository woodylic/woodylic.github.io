<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maven on woodylic's blog</title><link>https://woodylic.github.io/tags/maven/</link><description>Recent content in maven on woodylic's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 23 Mar 2017 23:58:41 +0000</lastBuildDate><atom:link href="https://woodylic.github.io/tags/maven/index.xml" rel="self" type="application/rss+xml"/><item><title>使用maven和flyway管理数据库schema</title><link>https://woodylic.github.io/post/manage-database-migration-using-maven-and-flyway/</link><pubDate>Thu, 23 Mar 2017 23:58:41 +0000</pubDate><guid>https://woodylic.github.io/post/manage-database-migration-using-maven-and-flyway/</guid><description>&lt;h1 id="为什么需要数据库schema版本管理">为什么需要数据库schema版本管理&lt;/h1>
&lt;p>作为开发人员，代码版本控制已经属于标配了，但是很多团队还不会把数据库schema纳入版本控制。在开发期间，schema随着需求变化，而这些变化难以追踪记录，从而导致开发人员之间，以及各个环境下的数据库schema的一致性问题。&lt;/p>
&lt;p>引入数据库schema版本管理，是期望模仿代码版本控制，把schema的所有版本记录下来，并且可以自动地把数据库升级到最新版本。&lt;/p>
&lt;p>&lt;em>参考：&lt;a href="https://flywaydb.org/getstarted/why">Why database migrations?&lt;/a>&lt;/em>&lt;/p></description></item><item><title>把db scheme脚本移出resources目录</title><link>https://woodylic.github.io/post/move-db-scheme-out-from-resources-folder/</link><pubDate>Thu, 02 Mar 2017 00:00:50 +0000</pubDate><guid>https://woodylic.github.io/post/move-db-scheme-out-from-resources-folder/</guid><description>&lt;p>在&lt;a href="https://github.com/woodylic/blog/issues/2">用DbUnit实现Dao层的单元测试&lt;/a>中，我把数据库scheme脚本放在了/src/test/resources目录下，这样在初始化dataSource的时候，可以很方便地初始化数据库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;jdbc:initialize-database&lt;/span> &lt;span class="na">data-source=&lt;/span>&lt;span class="s">&amp;#34;dataSource&amp;#34;&lt;/span> &lt;span class="na">ignore-failures=&lt;/span>&lt;span class="s">&amp;#34;DROPS&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;jdbc:script&lt;/span> &lt;span class="na">location=&lt;/span>&lt;span class="s">&amp;#34;classpath:scheme.sql&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/jdbc:initialize-database&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是scheme.sql放在/src/test/resources下其实不太合理，数据库的scheme脚本应该是project级别的，不应该放在test下。而放在/src/main/resources下感觉也不太合理，/src/main/resources下放置的内容应该是在运行时会用到的各种配置文件。&lt;/p></description></item><item><title>在maven中使用profile和filtering管理多环境配置</title><link>https://woodylic.github.io/post/manage-config-files-for-different-envs-in-maven/</link><pubDate>Thu, 23 Feb 2017 23:46:46 +0000</pubDate><guid>https://woodylic.github.io/post/manage-config-files-for-different-envs-in-maven/</guid><description>&lt;h1 id="filtering">Filtering&lt;/h1>
&lt;p>Filtering是maven的resource插件提供的功能，作用是用环境变量、pom文件里定义的属性和指定配置文件里的属性替换属性文件(*.properties)里的占位符(如${jdbc.url})&lt;/p>
&lt;h1 id="profile">Profile&lt;/h1>
&lt;p>&lt;profile>是pom文件里的一个xml元素，在profile里几乎可以定义所有在pom里的定义的内容(如depencency，build，properties等，但不能再定义profile)。当一个profile被激活时，它定义的&lt;dependencies>，&lt;properties>等就会覆盖掉原pom里定义的相同内容，从而可以通过激活不同的profile来使用不同的配置。&lt;/p></description></item></channel></rss>