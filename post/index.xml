<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on woodylic's blog</title><link>https://woodylic.github.io/post/</link><description>Recent content in Posts on woodylic's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 28 Apr 2018 18:26:42 +0000</lastBuildDate><atom:link href="https://woodylic.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>.net core跨平台代码覆盖分析</title><link>https://woodylic.github.io/post/dotnet-core-cross-platform-code-coverage/</link><pubDate>Sat, 28 Apr 2018 18:26:42 +0000</pubDate><guid>https://woodylic.github.io/post/dotnet-core-cross-platform-code-coverage/</guid><description>一个常见的CI流程，build -&amp;gt; unit test -&amp;gt; coverage analysis -&amp;gt; package。.net core实现了跨平台，但由于工具链缺失的原因，test和code cove</description></item><item><title>翻译：为什么应该在类库里使用ConfigureAwait(false)</title><link>https://woodylic.github.io/post/why-you-should-use-configureawait-false-in-your-library-code-cn/</link><pubDate>Mon, 11 Dec 2017 13:04:09 +0000</pubDate><guid>https://woodylic.github.io/post/why-you-should-use-configureawait-false-in-your-library-code-cn/</guid><description>源文链接：C#: Why you should use ConfigureAwait(false) in your library code （翻译：woodylic） 自从.NET 4.5引入了async/await以后，编写异步代码变得相当容易。A</description></item><item><title>翻译：Clean Architecture in .Net</title><link>https://woodylic.github.io/post/clean-architecture-in-dotnet-cn/</link><pubDate>Thu, 24 Aug 2017 10:05:44 +0000</pubDate><guid>https://woodylic.github.io/post/clean-architecture-in-dotnet-cn/</guid><description>源文链接：Clean Architecture in .Net（翻译：woodylic） 前言 几年前我偶然发现了Robert Martin的一个关于分离关注点的演讲，在这个演</description></item><item><title>slf4net和NLog集成</title><link>https://woodylic.github.io/post/slf4net-and-nlog/</link><pubDate>Wed, 31 May 2017 00:10:27 +0000</pubDate><guid>https://woodylic.github.io/post/slf4net-and-nlog/</guid><description>这是一个slf4net和NLog集成的简单例子。https://github.com/woodylic/logging-facade-sam</description></item><item><title>使用maven和flyway管理数据库schema</title><link>https://woodylic.github.io/post/manage-database-migration-using-maven-and-flyway/</link><pubDate>Thu, 23 Mar 2017 23:58:41 +0000</pubDate><guid>https://woodylic.github.io/post/manage-database-migration-using-maven-and-flyway/</guid><description>为什么需要数据库schema版本管理 作为开发人员，代码版本控制已经属于标配了，但是很多团队还不会把数据库schema纳入版本控制。在开发期间</description></item><item><title>把db scheme脚本移出resources目录</title><link>https://woodylic.github.io/post/move-db-scheme-out-from-resources-folder/</link><pubDate>Thu, 02 Mar 2017 00:00:50 +0000</pubDate><guid>https://woodylic.github.io/post/move-db-scheme-out-from-resources-folder/</guid><description>在用DbUnit实现Dao层的单元测试中，我把数据库scheme脚本放在了/src/test/resources目录下，这样在初始化data</description></item><item><title>在maven中使用profile和filtering管理多环境配置</title><link>https://woodylic.github.io/post/manage-config-files-for-different-envs-in-maven/</link><pubDate>Thu, 23 Feb 2017 23:46:46 +0000</pubDate><guid>https://woodylic.github.io/post/manage-config-files-for-different-envs-in-maven/</guid><description>Filtering Filtering是maven的resource插件提供的功能，作用是用环境变量、pom文件里定义的属性和指定配置文件里的属性替换属性文件</description></item><item><title>用DbUnit实现Dao层的单元测试</title><link>https://woodylic.github.io/post/test-dao-with-dbunit/</link><pubDate>Wed, 22 Feb 2017 14:37:53 +0000</pubDate><guid>https://woodylic.github.io/post/test-dao-with-dbunit/</guid><description>前言 Dao层的单元测试，测试目的在于： 验证数据连接环境（包括ORM的配置和Dao的实现）的正确性。 验证sql语句的正确性。 单元测试的常规步骤</description></item><item><title>面向对象的多态</title><link>https://woodylic.github.io/post/polymorphic-sample-for-tester/</link><pubDate>Fri, 22 Jun 2012 16:26:02 +0000</pubDate><guid>https://woodylic.github.io/post/polymorphic-sample-for-tester/</guid><description>本文以自动化测试为例子解释面向对象中的多态概念。 从一个最简单的test case开始，打开一个网站，然后点击后退。这是一个国外的网站，所以要求</description></item></channel></rss>